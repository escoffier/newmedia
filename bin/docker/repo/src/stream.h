// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `stream.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __stream_h__
#define __stream_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Media
{

class Stream;
class StreamPrx;

}

namespace Media
{

class RequestCanceledException : public ::Ice::UserExceptionHelper<RequestCanceledException, ::Ice::UserException>
{
public:

    virtual ~RequestCanceledException();

    RequestCanceledException(const RequestCanceledException&) = default;

    RequestCanceledException() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static RequestCanceledException _iceS_RequestCanceledException_init;
/// \endcond

class OpenStreamException : public ::Ice::UserExceptionHelper<OpenStreamException, ::Ice::UserException>
{
public:

    virtual ~OpenStreamException();

    OpenStreamException(const OpenStreamException&) = default;

    OpenStreamException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    OpenStreamException(const ::std::string& callid, const ::std::string& reason) :
        callid(::std::move(callid)),
        reason(::std::move(reason))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(callid, reason);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string callid;
    ::std::string reason;
};

struct RealStreamRespParam
{
    ::std::string id;
    ::std::string callid;
    ::std::string sourceip;
    ::std::string sourceport;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(id, callid, sourceip, sourceport);
    }
};

struct RealStreamReqParam
{
    ::std::string id;
    ::std::string callid;
    ::std::string ip;
    int port;
    ::std::string userName;
    ::std::string password;
    ::std::string destip;
    int destport;
    int ssrc;
    int pt;
    ::std::string sdk;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const int&, const ::std::string&, const ::std::string&, const ::std::string&, const int&, const int&, const int&, const ::std::string&> ice_tuple() const
    {
        return std::tie(id, callid, ip, port, userName, password, destip, destport, ssrc, pt, sdk);
    }
};

struct StreamStatic
{
    int freenode;
    int busynode;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<const int&, const int&> ice_tuple() const
    {
        return std::tie(freenode, busynode);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Media
{

class Stream : public virtual ::Ice::Object
{
public:

    using ProxyType = StreamPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    /**
     * Encapsulates the results of a call to openRealStream.
     */
    struct OpenRealStreamResult
    {
        bool returnValue;
        RealStreamRespParam stm;
    };

    virtual void openRealStreamAsync(RealStreamReqParam ctg, ::std::function<void(bool returnValue, const RealStreamRespParam& stm)> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_openRealStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void closeStreamAsync(::std::string id, ::std::string callid, ::std::function<void()> response, ::std::function<void(::std::exception_ptr)> exception, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_closeStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getStreamStatic(::std::string id, StreamStatic& _cpp_static, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getStreamStatic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getRecordFiles(::std::string startTime, ::std::string endtime, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getRecordFiles(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void openVodStream(RealStreamReqParam req, RealStreamRespParam& resp, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_openVodStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void closeVodStream(::std::string callid, ::std::string id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_closeVodStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void controlVodStream(::std::string cmd, ::std::string callid, ::std::string id, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_controlVodStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Media
{

class StreamPrx : public virtual ::Ice::Proxy<StreamPrx, ::Ice::ObjectPrx>
{
public:

    bool openRealStream(const RealStreamReqParam& ctg, RealStreamRespParam& stm, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _result = _makePromiseOutgoing<Stream::OpenRealStreamResult>(true, this, &StreamPrx::_iceI_openRealStream, ctg, context).get();
        stm = ::std::move(_result.stm);
        return _result.returnValue;
    }

    template<template<typename> class P = ::std::promise>
    auto openRealStreamAsync(const RealStreamReqParam& ctg, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Stream::OpenRealStreamResult>>().get_future())
    {
        return _makePromiseOutgoing<Stream::OpenRealStreamResult, P>(false, this, &StreamPrx::_iceI_openRealStream, ctg, context);
    }

    ::std::function<void()>
    openRealStreamAsync(const RealStreamReqParam& ctg,
                        ::std::function<void(bool, RealStreamRespParam)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        auto _responseCb = [response](Stream::OpenRealStreamResult&& _result)
        {
            response(_result.returnValue, ::std::move(_result.stm));
        };
        return _makeLamdaOutgoing<Stream::OpenRealStreamResult>(_responseCb, ex, sent, this, &StreamPrx::_iceI_openRealStream, ctg, context);
    }

    /// \cond INTERNAL
    void _iceI_openRealStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Stream::OpenRealStreamResult>>&, const RealStreamReqParam&, const ::Ice::Context&);
    /// \endcond

    void closeStream(const ::std::string& id, const ::std::string& callid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &StreamPrx::_iceI_closeStream, id, callid, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto closeStreamAsync(const ::std::string& id, const ::std::string& callid, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &StreamPrx::_iceI_closeStream, id, callid, context);
    }

    ::std::function<void()>
    closeStreamAsync(const ::std::string& id, const ::std::string& callid,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &StreamPrx::_iceI_closeStream, id, callid, context);
    }

    /// \cond INTERNAL
    void _iceI_closeStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void getStreamStatic(const ::std::string& id, StreamStatic& _cpp_static, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _cpp_static = _makePromiseOutgoing<StreamStatic>(true, this, &StreamPrx::_iceI_getStreamStatic, id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getStreamStaticAsync(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<StreamStatic>>().get_future())
    {
        return _makePromiseOutgoing<StreamStatic, P>(false, this, &StreamPrx::_iceI_getStreamStatic, id, context);
    }

    ::std::function<void()>
    getStreamStaticAsync(const ::std::string& id,
                         ::std::function<void(StreamStatic)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<StreamStatic>(response, ex, sent, this, &StreamPrx::_iceI_getStreamStatic, id, context);
    }

    /// \cond INTERNAL
    void _iceI_getStreamStatic(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<StreamStatic>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void getRecordFiles(const ::std::string& startTime, const ::std::string& endtime, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &StreamPrx::_iceI_getRecordFiles, startTime, endtime, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getRecordFilesAsync(const ::std::string& startTime, const ::std::string& endtime, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &StreamPrx::_iceI_getRecordFiles, startTime, endtime, context);
    }

    ::std::function<void()>
    getRecordFilesAsync(const ::std::string& startTime, const ::std::string& endtime,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &StreamPrx::_iceI_getRecordFiles, startTime, endtime, context);
    }

    /// \cond INTERNAL
    void _iceI_getRecordFiles(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void openVodStream(const RealStreamReqParam& req, RealStreamRespParam& resp, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        resp = _makePromiseOutgoing<RealStreamRespParam>(true, this, &StreamPrx::_iceI_openVodStream, req, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto openVodStreamAsync(const RealStreamReqParam& req, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<RealStreamRespParam>>().get_future())
    {
        return _makePromiseOutgoing<RealStreamRespParam, P>(false, this, &StreamPrx::_iceI_openVodStream, req, context);
    }

    ::std::function<void()>
    openVodStreamAsync(const RealStreamReqParam& req,
                       ::std::function<void(RealStreamRespParam)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<RealStreamRespParam>(response, ex, sent, this, &StreamPrx::_iceI_openVodStream, req, context);
    }

    /// \cond INTERNAL
    void _iceI_openVodStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RealStreamRespParam>>&, const RealStreamReqParam&, const ::Ice::Context&);
    /// \endcond

    void closeVodStream(const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &StreamPrx::_iceI_closeVodStream, callid, id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto closeVodStreamAsync(const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &StreamPrx::_iceI_closeVodStream, callid, id, context);
    }

    ::std::function<void()>
    closeVodStreamAsync(const ::std::string& callid, const ::std::string& id,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &StreamPrx::_iceI_closeVodStream, callid, id, context);
    }

    /// \cond INTERNAL
    void _iceI_closeVodStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void controlVodStream(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &StreamPrx::_iceI_controlVodStream, cmd, callid, id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto controlVodStreamAsync(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &StreamPrx::_iceI_controlVodStream, cmd, callid, id, context);
    }

    ::std::function<void()>
    controlVodStreamAsync(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id,
                          ::std::function<void()> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &StreamPrx::_iceI_controlVodStream, cmd, callid, id, context);
    }

    /// \cond INTERNAL
    void _iceI_controlVodStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    StreamPrx() = default;
    friend ::std::shared_ptr<StreamPrx> IceInternal::createProxy<StreamPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::Media::OpenStreamException, S>
{
    static void read(S* istr, ::Media::OpenStreamException& v)
    {
        istr->readAll(v.callid, v.reason);
    }
};

template<>
struct StreamableTraits<::Media::RealStreamRespParam>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Media::RealStreamRespParam, S>
{
    static void read(S* istr, ::Media::RealStreamRespParam& v)
    {
        istr->readAll(v.id, v.callid, v.sourceip, v.sourceport);
    }
};

template<>
struct StreamableTraits<::Media::RealStreamReqParam>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 23;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Media::RealStreamReqParam, S>
{
    static void read(S* istr, ::Media::RealStreamReqParam& v)
    {
        istr->readAll(v.id, v.callid, v.ip, v.port, v.userName, v.password, v.destip, v.destport, v.ssrc, v.pt, v.sdk);
    }
};

template<>
struct StreamableTraits<::Media::StreamStatic>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::Media::StreamStatic, S>
{
    static void read(S* istr, ::Media::StreamStatic& v)
    {
        istr->readAll(v.freenode, v.busynode);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace Media
{

using StreamPtr = ::std::shared_ptr<Stream>;
using StreamPrxPtr = ::std::shared_ptr<StreamPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Media
{

class Stream;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Media::Stream>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Media::Stream*);
/// \endcond

}

}

namespace Media
{

class Stream;
/// \cond INTERNAL
::Ice::Object* upCast(Stream*);
/// \endcond
typedef ::IceInternal::Handle< Stream> StreamPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Media::Stream> StreamPrx;
typedef StreamPrx StreamPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(StreamPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Media
{

class RequestCanceledException : public ::Ice::UserException
{
public:

    RequestCanceledException() {}
    virtual ~RequestCanceledException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual RequestCanceledException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static RequestCanceledException _iceS_RequestCanceledException_init;
/// \endcond

class OpenStreamException : public ::Ice::UserException
{
public:

    OpenStreamException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    OpenStreamException(const ::std::string& callid, const ::std::string& reason);
    virtual ~OpenStreamException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual OpenStreamException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string callid;
    ::std::string reason;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

struct RealStreamRespParam
{
    ::std::string id;
    ::std::string callid;
    ::std::string sourceip;
    ::std::string sourceport;

    bool operator==(const RealStreamRespParam& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(callid != rhs_.callid)
        {
            return false;
        }
        if(sourceip != rhs_.sourceip)
        {
            return false;
        }
        if(sourceport != rhs_.sourceport)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RealStreamRespParam& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(callid < rhs_.callid)
        {
            return true;
        }
        else if(rhs_.callid < callid)
        {
            return false;
        }
        if(sourceip < rhs_.sourceip)
        {
            return true;
        }
        else if(rhs_.sourceip < sourceip)
        {
            return false;
        }
        if(sourceport < rhs_.sourceport)
        {
            return true;
        }
        else if(rhs_.sourceport < sourceport)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RealStreamRespParam& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const RealStreamRespParam& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const RealStreamRespParam& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const RealStreamRespParam& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct RealStreamReqParam
{
    ::std::string id;
    ::std::string callid;
    ::std::string ip;
    ::Ice::Int port;
    ::std::string userName;
    ::std::string password;
    ::std::string destip;
    ::Ice::Int destport;
    ::Ice::Int ssrc;
    ::Ice::Int pt;
    ::std::string sdk;

    bool operator==(const RealStreamReqParam& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(callid != rhs_.callid)
        {
            return false;
        }
        if(ip != rhs_.ip)
        {
            return false;
        }
        if(port != rhs_.port)
        {
            return false;
        }
        if(userName != rhs_.userName)
        {
            return false;
        }
        if(password != rhs_.password)
        {
            return false;
        }
        if(destip != rhs_.destip)
        {
            return false;
        }
        if(destport != rhs_.destport)
        {
            return false;
        }
        if(ssrc != rhs_.ssrc)
        {
            return false;
        }
        if(pt != rhs_.pt)
        {
            return false;
        }
        if(sdk != rhs_.sdk)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RealStreamReqParam& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(callid < rhs_.callid)
        {
            return true;
        }
        else if(rhs_.callid < callid)
        {
            return false;
        }
        if(ip < rhs_.ip)
        {
            return true;
        }
        else if(rhs_.ip < ip)
        {
            return false;
        }
        if(port < rhs_.port)
        {
            return true;
        }
        else if(rhs_.port < port)
        {
            return false;
        }
        if(userName < rhs_.userName)
        {
            return true;
        }
        else if(rhs_.userName < userName)
        {
            return false;
        }
        if(password < rhs_.password)
        {
            return true;
        }
        else if(rhs_.password < password)
        {
            return false;
        }
        if(destip < rhs_.destip)
        {
            return true;
        }
        else if(rhs_.destip < destip)
        {
            return false;
        }
        if(destport < rhs_.destport)
        {
            return true;
        }
        else if(rhs_.destport < destport)
        {
            return false;
        }
        if(ssrc < rhs_.ssrc)
        {
            return true;
        }
        else if(rhs_.ssrc < ssrc)
        {
            return false;
        }
        if(pt < rhs_.pt)
        {
            return true;
        }
        else if(rhs_.pt < pt)
        {
            return false;
        }
        if(sdk < rhs_.sdk)
        {
            return true;
        }
        else if(rhs_.sdk < sdk)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RealStreamReqParam& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const RealStreamReqParam& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const RealStreamReqParam& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const RealStreamReqParam& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct StreamStatic
{
    ::Ice::Int freenode;
    ::Ice::Int busynode;

    bool operator==(const StreamStatic& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(freenode != rhs_.freenode)
        {
            return false;
        }
        if(busynode != rhs_.busynode)
        {
            return false;
        }
        return true;
    }

    bool operator<(const StreamStatic& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(freenode < rhs_.freenode)
        {
            return true;
        }
        else if(rhs_.freenode < freenode)
        {
            return false;
        }
        if(busynode < rhs_.busynode)
        {
            return true;
        }
        else if(rhs_.busynode < busynode)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const StreamStatic& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const StreamStatic& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const StreamStatic& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const StreamStatic& rhs_) const
    {
        return !operator<(rhs_);
    }
};

}

namespace Media
{

/**
 * AMD callback class for Media::Stream::openRealStream_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Stream_openRealStream : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Stream_openRealStream();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response(bool result, const RealStreamRespParam& stm) = 0;
};

typedef ::IceUtil::Handle< ::Media::AMD_Stream_openRealStream> AMD_Stream_openRealStreamPtr;

/**
 * AMD callback class for Media::Stream::closeStream_async.
 * Call the ice_response method for a successful completion, or the ice_exception
 * method in the case of an error.
 */
class AMD_Stream_closeStream : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Stream_closeStream();

    /**
     * Call ice_response for a successful completion.
     */
    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Media::AMD_Stream_closeStream> AMD_Stream_closeStreamPtr;

}

/// \cond INTERNAL
namespace IceAsync
{

namespace Media
{

class AMD_Stream_openRealStream : public ::Media::AMD_Stream_openRealStream, public ::IceInternal::IncomingAsync
{
public:

    AMD_Stream_openRealStream(::IceInternal::Incoming&);

    virtual void ice_response(bool, const ::Media::RealStreamRespParam&);
};

class AMD_Stream_closeStream : public ::Media::AMD_Stream_closeStream, public ::IceInternal::IncomingAsync
{
public:

    AMD_Stream_closeStream(::IceInternal::Incoming&);

    virtual void ice_response();
};

}

}
/// \endcond

namespace Media
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Media::Stream::begin_openRealStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_openRealStream.
 */
class Callback_Stream_openRealStream_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stream_openRealStream_Base> Callback_Stream_openRealStreamPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Media::Stream::begin_closeStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_closeStream.
 */
class Callback_Stream_closeStream_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stream_closeStream_Base> Callback_Stream_closeStreamPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Media::Stream::begin_getStreamStatic.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_getStreamStatic.
 */
class Callback_Stream_getStreamStatic_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stream_getStreamStatic_Base> Callback_Stream_getStreamStaticPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Media::Stream::begin_getRecordFiles.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_getRecordFiles.
 */
class Callback_Stream_getRecordFiles_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stream_getRecordFiles_Base> Callback_Stream_getRecordFilesPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Media::Stream::begin_openVodStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_openVodStream.
 */
class Callback_Stream_openVodStream_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stream_openVodStream_Base> Callback_Stream_openVodStreamPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Media::Stream::begin_closeVodStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_closeVodStream.
 */
class Callback_Stream_closeVodStream_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stream_closeVodStream_Base> Callback_Stream_closeVodStreamPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Media::Stream::begin_controlVodStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_controlVodStream.
 */
class Callback_Stream_controlVodStream_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stream_controlVodStream_Base> Callback_Stream_controlVodStreamPtr;

}

namespace IceProxy
{

namespace Media
{

class Stream : public virtual ::Ice::Proxy<Stream, ::IceProxy::Ice::Object>
{
public:

    bool openRealStream(const ::Media::RealStreamReqParam& ctg, ::Media::RealStreamRespParam& stm, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_openRealStream(stm, _iceI_begin_openRealStream(ctg, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Media::RealStreamReqParam& ctg, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_openRealStream(ctg, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Media::RealStreamReqParam& ctg, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openRealStream(ctg, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Media::RealStreamReqParam& ctg, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openRealStream(ctg, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Media::RealStreamReqParam& ctg, const ::Media::Callback_Stream_openRealStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openRealStream(ctg, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Media::RealStreamReqParam& ctg, const ::Ice::Context& context, const ::Media::Callback_Stream_openRealStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openRealStream(ctg, context, cb, cookie);
    }

    bool end_openRealStream(::Media::RealStreamRespParam& stm, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_openRealStream(::Media::RealStreamRespParam& iceP_stm, bool& ret, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_openRealStream(const ::Media::RealStreamReqParam&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void closeStream(const ::std::string& id, const ::std::string& callid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_closeStream(_iceI_begin_closeStream(id, callid, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_closeStream(const ::std::string& id, const ::std::string& callid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_closeStream(id, callid, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeStream(const ::std::string& id, const ::std::string& callid, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeStream(id, callid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeStream(const ::std::string& id, const ::std::string& callid, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeStream(id, callid, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeStream(const ::std::string& id, const ::std::string& callid, const ::Media::Callback_Stream_closeStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeStream(id, callid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeStream(const ::std::string& id, const ::std::string& callid, const ::Ice::Context& context, const ::Media::Callback_Stream_closeStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeStream(id, callid, context, cb, cookie);
    }

    void end_closeStream(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_closeStream(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getStreamStatic(const ::std::string& id, ::Media::StreamStatic& _cpp_static, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getStreamStatic(_cpp_static, _iceI_begin_getStreamStatic(id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getStreamStatic(const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getStreamStatic(id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStreamStatic(const ::std::string& id, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStreamStatic(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStreamStatic(const ::std::string& id, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStreamStatic(id, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStreamStatic(const ::std::string& id, const ::Media::Callback_Stream_getStreamStaticPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStreamStatic(id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStreamStatic(const ::std::string& id, const ::Ice::Context& context, const ::Media::Callback_Stream_getStreamStaticPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStreamStatic(id, context, cb, cookie);
    }

    void end_getStreamStatic(::Media::StreamStatic& _cpp_static, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_getStreamStatic(::Media::StreamStatic& iceP_static, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_getStreamStatic(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getRecordFiles(const ::std::string& startTime, const ::std::string& endtime, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getRecordFiles(_iceI_begin_getRecordFiles(startTime, endtime, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRecordFiles(const ::std::string& startTime, const ::std::string& endtime, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRecordFiles(startTime, endtime, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRecordFiles(const ::std::string& startTime, const ::std::string& endtime, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRecordFiles(startTime, endtime, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRecordFiles(const ::std::string& startTime, const ::std::string& endtime, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRecordFiles(startTime, endtime, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRecordFiles(const ::std::string& startTime, const ::std::string& endtime, const ::Media::Callback_Stream_getRecordFilesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRecordFiles(startTime, endtime, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRecordFiles(const ::std::string& startTime, const ::std::string& endtime, const ::Ice::Context& context, const ::Media::Callback_Stream_getRecordFilesPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRecordFiles(startTime, endtime, context, cb, cookie);
    }

    void end_getRecordFiles(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRecordFiles(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void openVodStream(const ::Media::RealStreamReqParam& req, ::Media::RealStreamRespParam& resp, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_openVodStream(resp, _iceI_begin_openVodStream(req, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_openVodStream(const ::Media::RealStreamReqParam& req, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_openVodStream(req, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openVodStream(const ::Media::RealStreamReqParam& req, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openVodStream(req, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openVodStream(const ::Media::RealStreamReqParam& req, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openVodStream(req, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openVodStream(const ::Media::RealStreamReqParam& req, const ::Media::Callback_Stream_openVodStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openVodStream(req, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_openVodStream(const ::Media::RealStreamReqParam& req, const ::Ice::Context& context, const ::Media::Callback_Stream_openVodStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openVodStream(req, context, cb, cookie);
    }

    void end_openVodStream(::Media::RealStreamRespParam& resp, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_openVodStream(::Media::RealStreamRespParam& iceP_resp, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_openVodStream(const ::Media::RealStreamReqParam&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void closeVodStream(const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_closeVodStream(_iceI_begin_closeVodStream(callid, id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_closeVodStream(const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_closeVodStream(callid, id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_closeVodStream(const ::std::string& callid, const ::std::string& id, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeVodStream(callid, id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeVodStream(const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeVodStream(callid, id, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeVodStream(const ::std::string& callid, const ::std::string& id, const ::Media::Callback_Stream_closeVodStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeVodStream(callid, id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_closeVodStream(const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context, const ::Media::Callback_Stream_closeVodStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_closeVodStream(callid, id, context, cb, cookie);
    }

    void end_closeVodStream(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_closeVodStream(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void controlVodStream(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_controlVodStream(_iceI_begin_controlVodStream(cmd, callid, id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_controlVodStream(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_controlVodStream(cmd, callid, id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_controlVodStream(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_controlVodStream(cmd, callid, id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_controlVodStream(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_controlVodStream(cmd, callid, id, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_controlVodStream(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id, const ::Media::Callback_Stream_controlVodStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_controlVodStream(cmd, callid, id, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_controlVodStream(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id, const ::Ice::Context& context, const ::Media::Callback_Stream_controlVodStreamPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_controlVodStream(cmd, callid, id, context, cb, cookie);
    }

    void end_controlVodStream(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_controlVodStream(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Media
{

class Stream : public virtual ::Ice::Object
{
public:

    typedef StreamPrx ProxyType;
    typedef StreamPtr PointerType;

    virtual ~Stream();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void openRealStream_async(const ::Media::AMD_Stream_openRealStreamPtr& cb, const RealStreamReqParam& ctg, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_openRealStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void closeStream_async(const ::Media::AMD_Stream_closeStreamPtr& cb, const ::std::string& id, const ::std::string& callid, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_closeStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getStreamStatic(const ::std::string& id, StreamStatic& _cpp_static, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getStreamStatic(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void getRecordFiles(const ::std::string& startTime, const ::std::string& endtime, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getRecordFiles(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void openVodStream(const RealStreamReqParam& req, RealStreamRespParam& resp, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_openVodStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void closeVodStream(const ::std::string& callid, const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_closeVodStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void controlVodStream(const ::std::string& cmd, const ::std::string& callid, const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_controlVodStream(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Stream& lhs, const Stream& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Stream& lhs, const Stream& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Media::RequestCanceledException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Media::OpenStreamException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::Media::OpenStreamException, S>
{
    static void write(S* ostr, const ::Media::OpenStreamException& v)
    {
        ostr->write(v.callid);
        ostr->write(v.reason);
    }
};

template<typename S>
struct StreamReader< ::Media::OpenStreamException, S>
{
    static void read(S* istr, ::Media::OpenStreamException& v)
    {
        istr->read(v.callid);
        istr->read(v.reason);
    }
};

template<>
struct StreamableTraits< ::Media::RealStreamRespParam>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Media::RealStreamRespParam, S>
{
    static void write(S* ostr, const ::Media::RealStreamRespParam& v)
    {
        ostr->write(v.id);
        ostr->write(v.callid);
        ostr->write(v.sourceip);
        ostr->write(v.sourceport);
    }
};

template<typename S>
struct StreamReader< ::Media::RealStreamRespParam, S>
{
    static void read(S* istr, ::Media::RealStreamRespParam& v)
    {
        istr->read(v.id);
        istr->read(v.callid);
        istr->read(v.sourceip);
        istr->read(v.sourceport);
    }
};

template<>
struct StreamableTraits< ::Media::RealStreamReqParam>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 23;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Media::RealStreamReqParam, S>
{
    static void write(S* ostr, const ::Media::RealStreamReqParam& v)
    {
        ostr->write(v.id);
        ostr->write(v.callid);
        ostr->write(v.ip);
        ostr->write(v.port);
        ostr->write(v.userName);
        ostr->write(v.password);
        ostr->write(v.destip);
        ostr->write(v.destport);
        ostr->write(v.ssrc);
        ostr->write(v.pt);
        ostr->write(v.sdk);
    }
};

template<typename S>
struct StreamReader< ::Media::RealStreamReqParam, S>
{
    static void read(S* istr, ::Media::RealStreamReqParam& v)
    {
        istr->read(v.id);
        istr->read(v.callid);
        istr->read(v.ip);
        istr->read(v.port);
        istr->read(v.userName);
        istr->read(v.password);
        istr->read(v.destip);
        istr->read(v.destport);
        istr->read(v.ssrc);
        istr->read(v.pt);
        istr->read(v.sdk);
    }
};

template<>
struct StreamableTraits< ::Media::StreamStatic>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::Media::StreamStatic, S>
{
    static void write(S* ostr, const ::Media::StreamStatic& v)
    {
        ostr->write(v.freenode);
        ostr->write(v.busynode);
    }
};

template<typename S>
struct StreamReader< ::Media::StreamStatic, S>
{
    static void read(S* istr, ::Media::StreamStatic& v)
    {
        istr->read(v.freenode);
        istr->read(v.busynode);
    }
};

}
/// \endcond

namespace Media
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Media::Stream::begin_openRealStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_openRealStream.
 */
template<class T>
class CallbackNC_Stream_openRealStream : public Callback_Stream_openRealStream_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const RealStreamRespParam&);

    CallbackNC_Stream_openRealStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StreamPrx proxy = StreamPrx::uncheckedCast(result->getProxy());
        RealStreamRespParam iceP_stm;
        bool ret;
        try
        {
            ret = proxy->end_openRealStream(iceP_stm, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret, iceP_stm);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_openRealStream.
 */
template<class T> Callback_Stream_openRealStreamPtr
newCallback_Stream_openRealStream(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const RealStreamRespParam&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_openRealStream<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_openRealStream.
 */
template<class T> Callback_Stream_openRealStreamPtr
newCallback_Stream_openRealStream(T* instance, void (T::*cb)(bool, const RealStreamRespParam&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_openRealStream<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Media::Stream::begin_openRealStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_openRealStream.
 */
template<class T, typename CT>
class Callback_Stream_openRealStream : public Callback_Stream_openRealStream_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const RealStreamRespParam&, const CT&);

    Callback_Stream_openRealStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StreamPrx proxy = StreamPrx::uncheckedCast(result->getProxy());
        RealStreamRespParam iceP_stm;
        bool ret;
        try
        {
            ret = proxy->end_openRealStream(iceP_stm, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, iceP_stm, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_openRealStream.
 */
template<class T, typename CT> Callback_Stream_openRealStreamPtr
newCallback_Stream_openRealStream(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const RealStreamRespParam&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_openRealStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_openRealStream.
 */
template<class T, typename CT> Callback_Stream_openRealStreamPtr
newCallback_Stream_openRealStream(T* instance, void (T::*cb)(bool, const RealStreamRespParam&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_openRealStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Media::Stream::begin_closeStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_closeStream.
 */
template<class T>
class CallbackNC_Stream_closeStream : public Callback_Stream_closeStream_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stream_closeStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeStream.
 */
template<class T> Callback_Stream_closeStreamPtr
newCallback_Stream_closeStream(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_closeStream<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeStream.
 */
template<class T> Callback_Stream_closeStreamPtr
newCallback_Stream_closeStream(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_closeStream<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeStream.
 */
template<class T> Callback_Stream_closeStreamPtr
newCallback_Stream_closeStream(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_closeStream<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeStream.
 */
template<class T> Callback_Stream_closeStreamPtr
newCallback_Stream_closeStream(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_closeStream<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Media::Stream::begin_closeStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_closeStream.
 */
template<class T, typename CT>
class Callback_Stream_closeStream : public Callback_Stream_closeStream_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stream_closeStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeStream.
 */
template<class T, typename CT> Callback_Stream_closeStreamPtr
newCallback_Stream_closeStream(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_closeStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeStream.
 */
template<class T, typename CT> Callback_Stream_closeStreamPtr
newCallback_Stream_closeStream(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_closeStream<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeStream.
 */
template<class T, typename CT> Callback_Stream_closeStreamPtr
newCallback_Stream_closeStream(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_closeStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeStream.
 */
template<class T, typename CT> Callback_Stream_closeStreamPtr
newCallback_Stream_closeStream(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_closeStream<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Media::Stream::begin_getStreamStatic.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_getStreamStatic.
 */
template<class T>
class CallbackNC_Stream_getStreamStatic : public Callback_Stream_getStreamStatic_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const StreamStatic&);

    CallbackNC_Stream_getStreamStatic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StreamPrx proxy = StreamPrx::uncheckedCast(result->getProxy());
        StreamStatic iceP_static;
        try
        {
            proxy->end_getStreamStatic(iceP_static, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_static);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getStreamStatic.
 */
template<class T> Callback_Stream_getStreamStaticPtr
newCallback_Stream_getStreamStatic(const IceUtil::Handle<T>& instance, void (T::*cb)(const StreamStatic&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_getStreamStatic<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getStreamStatic.
 */
template<class T> Callback_Stream_getStreamStaticPtr
newCallback_Stream_getStreamStatic(T* instance, void (T::*cb)(const StreamStatic&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_getStreamStatic<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Media::Stream::begin_getStreamStatic.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_getStreamStatic.
 */
template<class T, typename CT>
class Callback_Stream_getStreamStatic : public Callback_Stream_getStreamStatic_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const StreamStatic&, const CT&);

    Callback_Stream_getStreamStatic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StreamPrx proxy = StreamPrx::uncheckedCast(result->getProxy());
        StreamStatic iceP_static;
        try
        {
            proxy->end_getStreamStatic(iceP_static, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_static, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getStreamStatic.
 */
template<class T, typename CT> Callback_Stream_getStreamStaticPtr
newCallback_Stream_getStreamStatic(const IceUtil::Handle<T>& instance, void (T::*cb)(const StreamStatic&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_getStreamStatic<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getStreamStatic.
 */
template<class T, typename CT> Callback_Stream_getStreamStaticPtr
newCallback_Stream_getStreamStatic(T* instance, void (T::*cb)(const StreamStatic&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_getStreamStatic<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Media::Stream::begin_getRecordFiles.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_getRecordFiles.
 */
template<class T>
class CallbackNC_Stream_getRecordFiles : public Callback_Stream_getRecordFiles_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stream_getRecordFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getRecordFiles.
 */
template<class T> Callback_Stream_getRecordFilesPtr
newCallback_Stream_getRecordFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_getRecordFiles<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getRecordFiles.
 */
template<class T> Callback_Stream_getRecordFilesPtr
newCallback_Stream_getRecordFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_getRecordFiles<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getRecordFiles.
 */
template<class T> Callback_Stream_getRecordFilesPtr
newCallback_Stream_getRecordFiles(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_getRecordFiles<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getRecordFiles.
 */
template<class T> Callback_Stream_getRecordFilesPtr
newCallback_Stream_getRecordFiles(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_getRecordFiles<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Media::Stream::begin_getRecordFiles.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_getRecordFiles.
 */
template<class T, typename CT>
class Callback_Stream_getRecordFiles : public Callback_Stream_getRecordFiles_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stream_getRecordFiles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getRecordFiles.
 */
template<class T, typename CT> Callback_Stream_getRecordFilesPtr
newCallback_Stream_getRecordFiles(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_getRecordFiles<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getRecordFiles.
 */
template<class T, typename CT> Callback_Stream_getRecordFilesPtr
newCallback_Stream_getRecordFiles(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_getRecordFiles<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getRecordFiles.
 */
template<class T, typename CT> Callback_Stream_getRecordFilesPtr
newCallback_Stream_getRecordFiles(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_getRecordFiles<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_getRecordFiles.
 */
template<class T, typename CT> Callback_Stream_getRecordFilesPtr
newCallback_Stream_getRecordFiles(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_getRecordFiles<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Media::Stream::begin_openVodStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_openVodStream.
 */
template<class T>
class CallbackNC_Stream_openVodStream : public Callback_Stream_openVodStream_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const RealStreamRespParam&);

    CallbackNC_Stream_openVodStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StreamPrx proxy = StreamPrx::uncheckedCast(result->getProxy());
        RealStreamRespParam iceP_resp;
        try
        {
            proxy->end_openVodStream(iceP_resp, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_resp);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_openVodStream.
 */
template<class T> Callback_Stream_openVodStreamPtr
newCallback_Stream_openVodStream(const IceUtil::Handle<T>& instance, void (T::*cb)(const RealStreamRespParam&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_openVodStream<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_openVodStream.
 */
template<class T> Callback_Stream_openVodStreamPtr
newCallback_Stream_openVodStream(T* instance, void (T::*cb)(const RealStreamRespParam&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_openVodStream<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Media::Stream::begin_openVodStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_openVodStream.
 */
template<class T, typename CT>
class Callback_Stream_openVodStream : public Callback_Stream_openVodStream_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const RealStreamRespParam&, const CT&);

    Callback_Stream_openVodStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        StreamPrx proxy = StreamPrx::uncheckedCast(result->getProxy());
        RealStreamRespParam iceP_resp;
        try
        {
            proxy->end_openVodStream(iceP_resp, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_resp, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_openVodStream.
 */
template<class T, typename CT> Callback_Stream_openVodStreamPtr
newCallback_Stream_openVodStream(const IceUtil::Handle<T>& instance, void (T::*cb)(const RealStreamRespParam&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_openVodStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_openVodStream.
 */
template<class T, typename CT> Callback_Stream_openVodStreamPtr
newCallback_Stream_openVodStream(T* instance, void (T::*cb)(const RealStreamRespParam&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_openVodStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Media::Stream::begin_closeVodStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_closeVodStream.
 */
template<class T>
class CallbackNC_Stream_closeVodStream : public Callback_Stream_closeVodStream_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stream_closeVodStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeVodStream.
 */
template<class T> Callback_Stream_closeVodStreamPtr
newCallback_Stream_closeVodStream(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_closeVodStream<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeVodStream.
 */
template<class T> Callback_Stream_closeVodStreamPtr
newCallback_Stream_closeVodStream(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_closeVodStream<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeVodStream.
 */
template<class T> Callback_Stream_closeVodStreamPtr
newCallback_Stream_closeVodStream(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_closeVodStream<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeVodStream.
 */
template<class T> Callback_Stream_closeVodStreamPtr
newCallback_Stream_closeVodStream(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_closeVodStream<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Media::Stream::begin_closeVodStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_closeVodStream.
 */
template<class T, typename CT>
class Callback_Stream_closeVodStream : public Callback_Stream_closeVodStream_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stream_closeVodStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeVodStream.
 */
template<class T, typename CT> Callback_Stream_closeVodStreamPtr
newCallback_Stream_closeVodStream(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_closeVodStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeVodStream.
 */
template<class T, typename CT> Callback_Stream_closeVodStreamPtr
newCallback_Stream_closeVodStream(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_closeVodStream<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeVodStream.
 */
template<class T, typename CT> Callback_Stream_closeVodStreamPtr
newCallback_Stream_closeVodStream(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_closeVodStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_closeVodStream.
 */
template<class T, typename CT> Callback_Stream_closeVodStreamPtr
newCallback_Stream_closeVodStream(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_closeVodStream<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Media::Stream::begin_controlVodStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_controlVodStream.
 */
template<class T>
class CallbackNC_Stream_controlVodStream : public Callback_Stream_controlVodStream_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stream_controlVodStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_controlVodStream.
 */
template<class T> Callback_Stream_controlVodStreamPtr
newCallback_Stream_controlVodStream(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_controlVodStream<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_controlVodStream.
 */
template<class T> Callback_Stream_controlVodStreamPtr
newCallback_Stream_controlVodStream(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_controlVodStream<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_controlVodStream.
 */
template<class T> Callback_Stream_controlVodStreamPtr
newCallback_Stream_controlVodStream(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_controlVodStream<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_controlVodStream.
 */
template<class T> Callback_Stream_controlVodStreamPtr
newCallback_Stream_controlVodStream(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stream_controlVodStream<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Media::Stream::begin_controlVodStream.
 * Create a wrapper instance by calling ::Media::newCallback_Stream_controlVodStream.
 */
template<class T, typename CT>
class Callback_Stream_controlVodStream : public Callback_Stream_controlVodStream_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stream_controlVodStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_controlVodStream.
 */
template<class T, typename CT> Callback_Stream_controlVodStreamPtr
newCallback_Stream_controlVodStream(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_controlVodStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_controlVodStream.
 */
template<class T, typename CT> Callback_Stream_controlVodStreamPtr
newCallback_Stream_controlVodStream(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_controlVodStream<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_controlVodStream.
 */
template<class T, typename CT> Callback_Stream_controlVodStreamPtr
newCallback_Stream_controlVodStream(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_controlVodStream<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Media::Stream::begin_controlVodStream.
 */
template<class T, typename CT> Callback_Stream_controlVodStreamPtr
newCallback_Stream_controlVodStream(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stream_controlVodStream<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
